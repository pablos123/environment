# Read this when you are doubting again about using terminal multiplexers or, in particular, tmux.
# If I'm using a terminal multiplexer I'm going to be using a minimal and GREAT terminal like st. No more to add.
# Terminator is the best thing for not using a terminal multiplexer but I keep coming back
# to tmux. It seems that is something I want to use. Remember this.
# The only reason to not use a terminal multiplexer is to use a terminal that gie you
# all the features in the multiplexer. e.g Terminator. I say terminator because it works great, like non other.
# Another reason is to have img support for example, with wezterm and kitty, but I was using Terminator this
# past 4 months and that was not a problem. Because I works incredible well.
# A downside to Terminator is that it uses gtk. I don't mind having it installed but I try to avoid that.
# Wezterm also break neovim splitted windows, I hated that, it was a dissapointment.
# Ghostty is not compiling with the last version of Zig. Etc, all things that I hate.
# I can go back to using kitty at some point, but not in the short term.

# man https://www.man7.org/linux/man-pages/man1/tmux.1.html

# Default command
set-option -g default-command "/usr/bin/env bash"

# Copy/Paste
# https://github.com/tmux/tmux/wiki/Clipboard
# VTE terminals (GNOME terminal, XFCE terminal, Terminator) do not support the OSC 52 escape sequence.
# st does support it.
# The tmux set-clipboard option was added in tmux 1.5 with a default of on;
# the default was changed to external when external was added in tmux 2.6.
# The difference is that on both makes tmux set the clipboard for the outside terminal,
# and allows applications inside tmux to set tmux's clipboard (adding a paste buffer).
# external only makes tmux set the clipboard and forbids applications inside from doing so.
set -s set-clipboard on

# Start selection with v in copy mode
bind -T copy-mode-vi v send-keys -X begin-selection

# Default behaviour for Return/Enter key but send the selection to clipboard if y is pressed
# Default behaviour for Return/Enter key but send the selection to primary if m is pressed
bind -T copy-mode-vi y send-keys -X copy-pipe "xsel --input --clipboard"
bind -T copy-mode-vi m send-keys -X copy-pipe "xsel --input --primary"

# Do not clear the selection when after releasing the mouse.
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection-no-clear

# Remember that you can go back to mouse's system behaviour of the mouse pressing shift in most terminals.
# So:
# - shift + middleclick is going to paste primary.
# - shift + mouse selection is going to populate primary.
# That's why shift + ctrl + v works in every terminal. Conventions.

# To summarize
# If you copy from tmux (with the mouse or with enter key after you select in copy mode)
# you are not ovewriting any of the system clipboards. You can paste the tmux buffer with normal ctrl + ]
# If you select with shift + mouse, you select to primary and you can paste with shift + middleclick or middleclick depdending on context.
# If you select in copy mode and then you copy with m, you copy to primary and you can paste with shift + middleclick or middleclick depending on context.
# If you select in copy mode and then you copy with y, you copy to clipboard and you can can paste with shift + ctrl + v or ctrl + v depending on context.

# shift + ctrl + v is allways pasting from clipboard
# shift + middleclick is allways pasting from primary
# middleclick in a tmux terminal will paste from tmux buffer.
# selecting with mouse in copy mode will allways populate tmux buffer.
# middleclick in an application running inside tmux that reads from primary will paste from primary (e.g neovim)

# tmuxâ€™s copy mode uses emacs-style keybindings by default unless your EDITOR
# or VISUAL envvar contains the string "vi", then it uses vi-style bindings.
# I force it anyway.
set -g mouse on
set-window-option -g mode-keys vi

# Better keyboard shortcuts
set -g base-index 1
setw -g pane-base-index 1

# Visuals
set-option -g status-fg "#DDDDDD"
set-option -g status-bg "#000000"
set-option -g status-right "#{?window_bigger,[#{window_offset_x}#,#{window_offset_y}]} "
set-window-option -g window-status-separator " | "

# Tmux sensible sane configs
# Address vim mode switching delay
set -s escape-time 0
# Increase scrollback buffer size from 2000 to 100000 lines
set -g history-limit 100000
# Increase tmux messages display duration from 750ms to 4s
set -g display-time 4000
# Recomended $TERM, in fact is recommended to not set it to xterm-256-color here.
set -g default-terminal "screen-256color"
# Emacs key bindings in tmux command prompt (prefix + :) are better than vi keys, even for vim users
set -g status-keys emacs
# Focus events enabled for terminals that support them
set -g focus-events on
# Super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on
