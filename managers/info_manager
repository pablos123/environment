#!/usr/bin/env bash

help='
Options:

[-t] tell tux to say the information
[-p] pretty blank lines between info functions
[-e] explain
[-h] help
'

explain='
General:
Print information about your system, this is to not use neofetch and learn something.
Execute functions defined in ~/environment/managers/lib/info_functions.sh

This program will print whatever you want.
The functions need to send the output to stdout in the form of:
<column1>    :    <column2>
(The spaces are not necessary)
For example, write the function as:
print_me() {
  echo "hello : world!"
}
info_functions=( print_me )
And there you have it! Nothing more is required.

-t:
Use cowsay when printing.

-e
This.

-h:
Help.
'

pretty=false
tux=false
while getopts "peth" opt; do
    case $opt in
    p) pretty=true ;;
    t) tux=true ;;
    e) echo "$explain" && exit 0 ;;
    h) echo "$help" && exit 0 ;;
    *) echo "$help" && exit 1 ;;
    esac
done

empty_lines=
if $pretty; then
    util_linux_version=$(column --version | awk '{print $4}')
    if [[ "$util_linux_version" < "2.37.2" ]]; then
        echo "You have an old version of the column command. You need at least util-linux version 2.37.x" && exit 1
        exit 1
    fi
    empty_lines="--keep-empty-lines"
fi

if $tux; then
    if [[ -z "$(which cowsay)" ]]; then
        echo "Install cowsay to have tux telling you the information!" >&2
        exit 1
    fi
fi

function get_info() {
    local counter functions_count function
    source "$HOME/environment/managers/lib/info_functions.sh"
    counter=1
    functions_count=${#info_functions[@]}
    for function in "${info_functions[@]}"; do
        "$function"
        if $pretty && ((counter < functions_count)); then
            echo
        fi
        counter=$((counter + 1))
    done
}

information="$(get_info | sed --expression="s/\(.*:\)\s*/\1 /g" | column $empty_lines --table --separator ':')"

if $tux; then
    echo "$information" | cowsay -f tux -n
    exit 0
fi

echo "$information"
exit 0
